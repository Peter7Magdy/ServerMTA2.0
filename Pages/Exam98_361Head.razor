@page "/{QNumber:int}"
@inject NavigationManager NavigationManager
 <div    class="container">  
     
@if (QNumber > 79 || QNumber < 1)
{
         <h1>Error 404 Page not Found :( </h1>
 }
else
{
    
 <div class="container" style=" box-shadow:inset 0 0 15px rgba(0,0,0,.5); height:150px;">
        <div class="row text-center">
            <div class="col col-lg-3 col-md-6 col-sm-6">
                <h5 style="margin-top: 50px;">
                    Qeustion @QNumber of 79
                </h5>
            </div>
            <div class="col col-lg-2 col-md-6 col-sm-6">
                <div class="arrow">
                    @if(QNumber == 1){
                    <button class="arrow2 prev"><span class="spn"></span></button>
                   }
                   else{
                                       <button class="arrow2 prev"@onclick='()=>NavigateToComponent($"{(QNumber - 1) % 80}")'><span class="spn"></span></button>

                   }
                    @if (QNumber == 79){
                <button class="arrow2 next"><span class="spn"></span></button>
               }
                else{
                                <button class="arrow2 next" @onclick='()=>NavigateToComponent($"{(QNumber + 1) % 80}")'><span class="spn"></span></button>

                }
            </div>
            </div>
          <div class="col col-lg-2 col-md-6 col-sm-6" style="margin-top:50px; margin-left:40px;">
          @*      <input type="checkbox" id="cbmark"/>
                <label class="label" for="cbmark">  Mark For Review</label>     *@ 
                         <input type="checkbox" id="cbshow1" @bind="ExamMTA.allowShowAnswer" />
                <label class="label" for="cbshow1">   Show Answer</label>
      </div>
            <div class="col col-lg-2 col-md-6 col-sm-6" style="margin-top:50px">
                <button class="btnsubmit" @onclick='()=>NavigateToComponent($"Score")'>End Exam</button>

            </div>
        
             
          </div>
    </div>  


@*    <h3>@($"Question {Qeustion.ID}:-")</h3>*@
	<p > @Qeustion.Value </p> 
    <br />
    @if (Qeustion.Type == ControlType.RadioButton)
    {
        foreach (var item in Qeustion.Answers)
        {
            <input  type="radio"  id="@item.ID" value="@item.Value" @onchange="RadioSelection" 
        checked=@(RadioValue.Equals(item.Value,StringComparison.OrdinalIgnoreCase))   />
        <label class="fix" for="@item.ID">	<p>@item.Value </p> </label>
            <br />
        }
    }
    else if(Qeustion.Type == ControlType.CheackBox)
    {
        foreach (var item in Qeustion.Answers)
        {
                     <input type="checkbox" id="@item.ID"  
                   value="@item.IsSelected" @onchange="@((ChangeEventArgs __e) => CheckSelection(__e,item))" />
            <label class="fix"   for="@item.ID">	<p>@item.Value </p> </label>
            <br />
        }
    }
    @if(ExamMTA.allowShowAnswer)
    @if(showAnswer){
    @if (CorrectAnswer)
    {
        <h1>CORRECT</h1>
    }
    else
    {
        <h1>WRONG</h1>
    }
    }
    }

 
    

</div>
@code {
    [Parameter] public int QNumber { get; set; }
    public bool showAnswer = false;
    string RadioValue = "";
    public bool CorrectAnswer = false;
    public Exam Qeustion => ExamMTA.Exams98_361[(QNumber - 1) % 79];
    private void NavigateToComponent(string Report)
    {
        (showAnswer, CorrectAnswer) = (false, false);
        NavigationManager.NavigateTo(Report);
    }
    protected override void OnInitialized(){
        
        if (ExamMTA.ShuffleQeustion) {
            ExamMTA.shuffleQeustions();
        }
    else {
            ExamMTA.SortQeustion();
        }
        if (ExamMTA.ShuffleAnswer) {
            ExamMTA.shuffleAnswers();
        }
    else {
            ExamMTA.SortAnswer();
        }
    }
   //void RadioSelection(ChangeEventArgs args) => (showAnswer, RadioValue, CorrectAnswer,
   // ExamMTA.scores98_361[(QNumber - 1) % 79])  = (true,args.Value.ToString(),
   // (from item in Qeustion.Answers where item.Value == RadioValue select item.IsCorrect).FirstOrDefault<bool>(),
   // new ((QNumber - 1) % 78,CorrectAnswer));
     void RadioSelection(ChangeEventArgs args)
    {
        showAnswer = true;
        RadioValue = args.Value.ToString();
        CorrectAnswer = (from item in Qeustion.Answers where item.Value == RadioValue select item.IsCorrect).FirstOrDefault<bool>();
        ExamMTA.scores98_361[(QNumber - 1) % 79] = new ((QNumber - 1) % 78,CorrectAnswer);
    }
    void CheckSelection(ChangeEventArgs __e, Answer I)
    {
         showAnswer = true;
        Qeustion.Answers[Qeustion.Answers.FindIndex(x=> x.ID == I.ID)]= new(I.ID,I.Value,I.IsCorrect,(bool)__e.Value);    
   //  (showAnswer, Qeustion.Answers[Qeustion.Answers.FindIndex(x => x.ID == I.ID)]) = (true, new(I.ID, I.Value, I.IsCorrect, (bool)__e.Value));
         var CorrectAnswersCount = (from item in Qeustion.Answers where item.IsCorrect == true select item).ToList().Count();
        var SelectsAnswers = (from item in Qeustion.Answers where item.IsSelected == true select item).ToList();
        foreach (var item in SelectsAnswers)
        {
            if (!item.IsCorrect)
            {
                CorrectAnswer = false;
                break;
            }
            CorrectAnswer = true;
        }
        if (SelectsAnswers.Count != CorrectAnswersCount)
        {
            CorrectAnswer = false;
        }
        ExamMTA.scores98_361[(QNumber - 1) % 79] = new ((QNumber - 1) % 79,CorrectAnswer);
            }
                        }