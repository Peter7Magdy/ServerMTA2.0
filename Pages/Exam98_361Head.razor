@page "/{QNumber:int}"
@inject NavigationManager NavigationManager
 <div    class="container">
@if (QNumber > 79 || QNumber < 1)
{
         <h1>Error 404 Page not Found :( </h1>
 }
else
{

    <h3>@($"Question {Qeustion.ID}:-")</h3>
	<pre  >@Qeustion.Value </pre> 
    <br />
    @if (Qeustion.Type == ControlType.RadioButton)
    {
        foreach (var item in Qeustion.Answers)
        {
            <input  type="radio"  id="@item.ID" value="@item.Value" @onchange="RadioSelection" 
        checked=@(RadioValue.Equals(item.Value,StringComparison.OrdinalIgnoreCase))   />
        <label class="fix" for="@item.ID">	<pre>@item.Value </pre> </label>
            <br />
        }
    }
    else if(Qeustion.Type == ControlType.CheackBox)
    {
        foreach (var item in Qeustion.Answers)
        {
                     <input type="checkbox" id="@item.ID"  
                   value="@item.IsSelected" @onchange="@((ChangeEventArgs __e) => CheckSelection(__e,item))" />
            <label class="fix"   for="@item.ID">	<pre>@item.Value </pre> </label>
            <br />
        }
    }

    @if(showAnswer){
    @if (CorrectAnswer)
    {
        <h1>CORRECT</h1>
    }
    else
    {
        <h1>WRONG</h1>
    }
    }

    @if (QNumber == 79)
    {
        <button class="btnsubmit" @onclick='()=>NavigateToComponent($"Score")'>End Exam</button>
    }
    else
    {
        <button class="btnsubmit" @onclick='()=>NavigateToComponent($"{(QNumber + 1) % 80}")'>Next Qeustion</button>
    }
    }

</div>
@code {
    [Parameter] public int QNumber { get; set; }
    public bool showAnswer = false;
    string RadioValue = "";
    public bool CorrectAnswer = false;
    public Exam Qeustion => ExamMTA.Exams98_361[(QNumber - 1) % 79];
    private void NavigateToComponent(string Report)
    {
        (showAnswer, CorrectAnswer) = (false, false);
        NavigationManager.NavigateTo(Report);
    }
   //void RadioSelection(ChangeEventArgs args) => (showAnswer, RadioValue, CorrectAnswer,
   // ExamMTA.scores98_361[(QNumber - 1) % 79])  = (true,args.Value.ToString(),
   // (from item in Qeustion.Answers where item.Value == RadioValue select item.IsCorrect).FirstOrDefault<bool>(),
   // new ((QNumber - 1) % 78,CorrectAnswer));
     void RadioSelection(ChangeEventArgs args)
    {
        showAnswer = true;
        RadioValue = args.Value.ToString();
        CorrectAnswer = (from item in Qeustion.Answers where item.Value == RadioValue select item.IsCorrect).FirstOrDefault<bool>();
        ExamMTA.scores98_361[(QNumber - 1) % 79] = new ((QNumber - 1) % 78,CorrectAnswer);
    }
    void CheckSelection(ChangeEventArgs __e, Answer I)
    {
         showAnswer = true;
        Qeustion.Answers[Qeustion.Answers.FindIndex(x=> x.ID == I.ID)]= new(I.ID,I.Value,I.IsCorrect,(bool)__e.Value);    
   //  (showAnswer, Qeustion.Answers[Qeustion.Answers.FindIndex(x => x.ID == I.ID)]) = (true, new(I.ID, I.Value, I.IsCorrect, (bool)__e.Value));
         var CorrectAnswersCount = (from item in Qeustion.Answers where item.IsCorrect == true select item).ToList().Count();
        var SelectsAnswers = (from item in Qeustion.Answers where item.IsSelected == true select item).ToList();
        foreach (var item in SelectsAnswers)
        {
            if (!item.IsCorrect)
            {
                CorrectAnswer = false;
                break;
            }
            CorrectAnswer = true;
        }
        if (SelectsAnswers.Count != CorrectAnswersCount)
        {
            CorrectAnswer = false;
        }
        ExamMTA.scores98_361[(QNumber - 1) % 79] = new ((QNumber - 1) % 79,CorrectAnswer);
            }
                        }
